buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "JaredMaven"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

apply plugin: 'idea'
apply plugin: 'maven-publish'

version = "${mcVersion}-${modVersion}"
group = modGroup
archivesBaseName = modName

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
}

minecraft {
    mappings channel: 'snapshot', version: "${mcpMappings}"
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            ideaModule "${project.name}.main"

            mods {
                auracascade {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            ideaModule "${project.name}.main"

            mods {
                auracascade {
                    source sourceSets.main
                    //source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            args '--mod', modBaseName, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            ideaModule "${project.name}.main"

            mods {
                auracascade {
                    source sourceSets.main
                    //source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"

    compileOnly fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mcVersion}:${jeiVersion}")

    apiCompileOnly fg.deobf("vazkii.patchouli:Patchouli:${mcVersion}-${patchouliVersion}:api")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${mcVersion}-${patchouliVersion}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mcVersion}-${patchouliVersion}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title": "${modName}",
                "Specification-Vendor": "${modGroup}",
                "Specification-Version": "${mcVersion}",
                "Implementation-Title": project.name,
                "Implementation-Version": "${modVersion}",
                "Implementation-Vendor" :"${modGroup}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
/*
    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version': project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
 */
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}